// -*- coding: utf-8 -*-

// Copyright (c) 2016-2017 Ircam
// Copyright (c) 2016-2017 Jérémy Fabre

// This file is part of mezzanine-organization.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Calculate relative sizing for em when a px value is used.
//
// @param number $number
//   The px value
// @param number|string $context
//   The relative value to perform the calculation.
//
// @return number
//   The calculated value in the base unit.
@function calculate-em-px($x, $context) {
  $allowed-types: "font-size", "px";
  $type: typey-validator($context, $allowed-types);
  @if $type == "font-size" {
    $context-map-size: map-get($font-size, $context);
    @return typey-output-in-unit(($x / $context-map-size), em);
  }
  @if $type == "px" {
    @return typey-output-in-unit(($x / $context), em);
  }
}

// Calculate relative sizing for em when a multiplier is used.
//
// @param number $number
//   Multiple of line height to be used.
// @param number|string $context
//   The relative value to perform the calculation.
//
// @return number
//   The calculated value in the base unit.
@function calculate-em-multiplier($x, $context) {
  $allowed-types: "font-size", "px";
  $type: typey-validator($context, $allowed-types);
  @if $type == "font-size" {
    $context-map-size: map-get($font-size, $context);
    @return typey-output-in-unit(($x * $base-line-height) / $context-map-size, em);
  }
  @if $type == "px" {
    @return typey-output-in-unit(($x * $base-line-height) / $context, em);
  }
}
