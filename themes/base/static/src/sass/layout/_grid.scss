// -*- coding: utf-8 -*-

// Copyright (c) 2016-2017 Ircam
// Copyright (c) 2016-2017 Jérémy Fabre

// This file is part of mezzanine-organization.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

/* Base container properties */

%grid-container {

	margin-right: auto;
	margin-left: auto;
	padding-left: $grid-gutter;
	padding-right: $grid-gutter;

	@media screen and (max-width: map-get($breakpoints, md)) {
		padding-left: $grid-gutter / 2;
		padding-right: $grid-gutter / 2;
	}

}

/* Base column properties */

%grid-column {

    @include box-sizing(border-box);

    position: relative;
    width: 100%;
	padding-left: $grid-gutter / 2;
	padding-right: $grid-gutter / 2;
    min-height: 1px;
    /*float: left;*/
	display: inline-block;
	vertical-align: top;

}

/* Set box-sizing */

.#{$grid-container-prefix},
.#{$grid-row-prefix},
.#{$grid-row-prefix}:after,
.#{$grid-row-prefix}:before {

    @include box-sizing(border-box);

}

/* Container */

.#{$grid-container-prefix} {

	&,
	&-fluid,
	&-full,
	&-fixed {
		@extend %grid-container;
	}

	&-full {
		padding-left: 0;
		padding-right: 0;
	}

	&-fixed {
		width: $grid-unresponsive-width + $grid-gutter * 2;
	}

	@if $use-responsive-grid {

		max-width: map-get($breakpoints, sm);

    	@media screen and (min-width: map-get($breakpoints, md)) {
    		max-width: map-get($breakpoints, md);
    	}

    	@media screen and (min-width: map-get($breakpoints, lg)) {
    		max-width: map-get($breakpoints, lg);
    	}

	} @else {

		width: $grid-unresponsive-width + $grid-gutter * 2;

	}

}

/* Clearfix & box-model + list-style reset for ul support */

.#{$grid-row-prefix} {

    $margin: -$grid-gutter / 2;

    @include pie-clearfix();
    @include reset-list-style();
    @include reset-box-model();

    margin-left: -$grid-gutter / 2;
	margin-right: -$grid-gutter / 2;

	/* Nested grid */

	& > & {
	    clear: none;
	    float: left;
	    margin: 0 !important;
	}

}

/* Generate columns */

@if $use-responsive-grid {

	@each $size, $width in $breakpoints {

		@for $i from 0 to $grid-columns+1 {

			.#{$grid-col-prefix}-#{$size}-#{$i} {
				@extend %grid-column;
		    }

		}

    	@media screen and (min-width: map-get($breakpoints, $size)) {

			@for $i from 0 to $grid-columns+1 {

				$col-class: $grid-col-prefix + '-' + $size + '-';
				$value: percentage($i / $grid-columns);

			    .#{$col-class}#{$i} {
			        width: $value;
			    }

				@if $use-grid-push {
				    .#{$col-class}push-#{$i} {
				        left: $value;
				    }
				}

				@if $use-grid-pull {
				    .#{$col-class}pull-#{$i} {
				        right: $value;
				    }
				}

				@if $use-grid-offset {
				    .#{$col-class}offset-#{$i} {
				        margin-left: $value;
				    }
				}

			}

    	}

	}

} @else {

	@for $i from 0 to $grid-columns+1 {

		$value: percentage($i / $grid-columns);

		.#{$grid-col-prefix}-#{$i} {
			@extend %grid-column;
	    }

	    .#{$grid-col-prefix}-#{$i} {
	        width: percentage($i / $grid-columns);
	    }

		@if $use-grid-push {
			.#{$grid-col-prefix}-push-#{$i} {
				left: $value;
			}
		}

		@if $use-grid-pull {
			.#{$grid-col-prefix}-pull-#{$i} {
				right: $value;
			}
		}

		@if $use-grid-offset {
			.#{$grid-col-prefix}-offset-#{$i} {
				margin-left: $value;
			}
		}

	}

}
