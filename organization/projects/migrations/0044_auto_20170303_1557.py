# -*- coding: utf-8 -*-
# Generated by Django 1.9.11 on 2017-03-03 14:57
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import mezzanine.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('organization-network', '0088_organization_site'),
        ('sites', '0002_alter_domain_unique'),
        ('organization-core', '0005_linktype_fa_option'),
        ('organization-projects', '0043_auto_20170214_1643'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectCallBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', mezzanine.core.fields.RichTextField(verbose_name='Content')),
                ('content_fr', mezzanine.core.fields.RichTextField(null=True, verbose_name='Content')),
                ('content_en', mezzanine.core.fields.RichTextField(null=True, verbose_name='Content')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('title', models.CharField(max_length=1024, verbose_name='title')),
                ('title_fr', models.CharField(max_length=1024, null=True, verbose_name='title')),
                ('title_en', models.CharField(max_length=1024, null=True, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='description')),
                ('with_separator', models.BooleanField(default=False)),
                ('background_color', models.CharField(blank=True, choices=[('black', 'black'), ('yellow', 'yellow'), ('red', 'red'), ('white', 'white')], max_length=32, verbose_name='background color')),
                ('login_required', models.BooleanField(default=False, verbose_name='login required')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='ProjectCallFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('title', models.CharField(max_length=1024, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('file', mezzanine.core.fields.FileField(max_length=1024, verbose_name='document')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='ProjectCallImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('title', models.CharField(max_length=1024, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('file', mezzanine.core.fields.FileField(max_length=1024, verbose_name='Image')),
                ('credits', models.CharField(blank=True, max_length=256, null=True, verbose_name='credits')),
                ('type', models.CharField(choices=[('logo', 'logo'), ('logo_white', 'logo white'), ('logo_black', 'logo black'), ('logo_header', 'logo header'), ('logo_footer', 'logo footer'), ('slider', 'slider'), ('card', 'card'), ('page_slider', 'page - slider'), ('page_featured', 'page - featured')], max_length=64, verbose_name='type')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='ProjectCallLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, max_length=512, verbose_name='URL')),
                ('title', models.CharField(blank=True, max_length=1024, null=True, verbose_name='title')),
                ('title_fr', models.CharField(blank=True, max_length=1024, null=True, verbose_name='title')),
                ('title_en', models.CharField(blank=True, max_length=1024, null=True, verbose_name='title')),
            ],
            options={
                'verbose_name_plural': 'links',
                'abstract': False,
                'verbose_name': 'link',
            },
        ),
        migrations.CreateModel(
            name='ProjectICTData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affiliation', models.CharField(max_length=512, verbose_name='affiliation')),
                ('short_description', models.CharField(help_text='Very short description of challenge / technology (110 characters max)', max_length=110, verbose_name='short description')),
                ('technology_description', models.TextField(help_text='Description of the project technology to be made available to artists + challenges it produces (100-200 words) ', verbose_name='technology description')),
                ('challenges_description', models.TextField(help_text='Description of the  challenges faced by the ICT-Project (100-150 words).', verbose_name='challenges description')),
                ('objectives_description', models.TextField(help_text='What the project is looking to gain from the collaboration and what kind of artist would be suitable (100 – 150 words)', verbose_name='challenges description')),
                ('resources_description', models.TextField(help_text='Resources available to the artist (50 – 100 words)  -- e.g. office facility, studio facility, technical equipment, internet connection, laboratory, and periods of availability for artistic production, staff possibly allocated to the project, available budget for travel, consumables and equipments, etc.).', verbose_name='resources description')),
                ('letter', models.TextField(verbose_name='letter of commitment')),
                ('validation_status', models.IntegerField(choices=[(0, 'pending'), (1, 'accepted'), (2, 'rejected'), (3, 'in process')], verbose_name='validation status')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ict_projects_contact_person', to='organization-network.Person', verbose_name='Contact Person')),
            ],
            options={
                'verbose_name_plural': 'Project ICT data',
                'verbose_name': 'Project ICT data',
            },
        ),
        migrations.AlterModelOptions(
            name='projectcall',
            options={'ordering': ['title', 'name'], 'verbose_name': 'project call', 'verbose_name_plural': 'project calls'},
        ),
        migrations.AddField(
            model_name='projectcall',
            name='_meta_title',
            field=models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Title'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='content',
            field=mezzanine.core.fields.RichTextField(default='', verbose_name='Content'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='projectcall',
            name='content_en',
            field=mezzanine.core.fields.RichTextField(null=True, verbose_name='Content'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='content_fr',
            field=mezzanine.core.fields.RichTextField(null=True, verbose_name='Content'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='created',
            field=models.DateTimeField(editable=False, null=True),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='date_from',
            field=models.DateField(blank=True, null=True, verbose_name='begin date'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='date_to',
            field=models.DateField(blank=True, null=True, verbose_name='end date'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='description_en',
            field=models.TextField(blank=True, null=True, verbose_name='Description'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='description_fr',
            field=models.TextField(blank=True, null=True, verbose_name='Description'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='expiry_date',
            field=models.DateTimeField(blank=True, help_text="With Published chosen, won't be shown after this time", null=True, verbose_name='Expires on'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='gen_description',
            field=models.BooleanField(default=True, help_text='If checked, the description will be automatically generated from content. Uncheck if you want to manually set a custom description.', verbose_name='Generate description'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='in_sitemap',
            field=models.BooleanField(default=True, verbose_name='Show in sitemap'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='keywords_string',
            field=models.CharField(blank=True, editable=False, max_length=500),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='publish_date',
            field=models.DateTimeField(blank=True, db_index=True, help_text="With Published chosen, won't be shown until this time", null=True, verbose_name='Published from'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='short_url',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='site',
            field=models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='sites.Site'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='projectcall',
            name='slug',
            field=models.CharField(blank=True, help_text='Leave blank to have the URL auto-generated from the title.', max_length=2000, null=True, verbose_name='URL'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='status',
            field=models.IntegerField(choices=[(1, 'Draft'), (2, 'Published')], default=2, help_text='With Draft chosen, will only be shown for admin users on the site.', verbose_name='Status'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='title',
            field=models.CharField(default='', max_length=500, verbose_name='Title'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='projectcall',
            name='title_en',
            field=models.CharField(max_length=500, null=True, verbose_name='Title'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='title_fr',
            field=models.CharField(max_length=500, null=True, verbose_name='Title'),
        ),
        migrations.AddField(
            model_name='projectcall',
            name='updated',
            field=models.DateTimeField(editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='type',
            field=models.CharField(choices=[('internal', 'internal'), ('external', 'external'), ('ICT', 'ICT')], max_length=128, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='projectcall',
            name='description',
            field=models.TextField(blank=True, verbose_name='Description'),
        ),
        migrations.AddField(
            model_name='projectictdata',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ict_data', to='organization-projects.Project', verbose_name='project'),
        ),
        migrations.AddField(
            model_name='projectcalllink',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='links', to='organization-projects.ProjectCall', verbose_name='project call link'),
        ),
        migrations.AddField(
            model_name='projectcalllink',
            name='link_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organization-core.LinkType', verbose_name='link type'),
        ),
        migrations.AddField(
            model_name='projectcallimage',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='organization-projects.ProjectCall', verbose_name='project call image'),
        ),
        migrations.AddField(
            model_name='projectcallfile',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='organization-projects.ProjectCall', verbose_name='project call file'),
        ),
        migrations.AddField(
            model_name='projectcallblock',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocks', to='organization-projects.ProjectCall', verbose_name='project call blocks'),
        ),
    ]
