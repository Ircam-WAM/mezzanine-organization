# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2019-01-10 09:40
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import mezzanine.core.fields


def copy_project_to_project_page(apps, schema_editor):
    Project = apps.get_model('organization-projects', 'Project')
    ProjectPage = apps.get_model('organization-projects', 'ProjectPage')
    ProjectPageBlock = apps.get_model('organization-projects', 'ProjectPageBlock')
    ProjectPageImage = apps.get_model('organization-projects', 'ProjectPageImage')
    DynamicContentProjectPage = apps.get_model('organization-projects', 'DynamicContentProjectPage')

    for project in Project.objects.all():
        project_page = ProjectPage(project=project,
                                    expiry_date=project.expiry_date,
                                    in_sitemap=project.in_sitemap,
                                    publish_date=project.publish_date,
                                    short_url=project.short_url,
                                    site=project.site,
                                    status=project.status,
                                    title=project.title,
                                    )
        project_page.save()

        for project_block in project.blocks.all():
            project_page_block = ProjectPageBlock(project_page=project_page)
            for field in project_block._meta.fields:
                setattr(project_page_block, field.name, getattr(project_block, field.name))
            project_page_block.save()

        for project_image in project.images.all():
            project_page_image = ProjectPageImage(project_page=project_page)
            for field in project_image._meta.fields:
                setattr(project_page_image, field.name, getattr(project_image, field.name))
            project_page_image.save()

        for dynamic_content_project in project.dynamic_content_project.all():
            project_page_dynamic_content = DynamicContentProjectPage(project_page=project_page)
            for field in dynamic_content_project._meta.fields:
                setattr(project_page_dynamic_content, field.name, getattr(dynamic_content_project, field.name))
            project_page_dynamic_content.save()


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0002_alter_domain_unique'),
        ('organization-projects', '0077_merge_20181204_1801'),
    ]

    operations = [
        migrations.CreateModel(
            name='DynamicContentProjectPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('object_id', models.PositiveIntegerField(editable=False, null=True, verbose_name='related object')),
                ('content_type', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='content type')),
            ],
            options={
                'verbose_name': 'Dynamic Content Project Page',
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='ProjectPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keywords_string', models.CharField(blank=True, editable=False, max_length=500)),
                ('title', models.CharField(max_length=500, verbose_name='Title')),
                ('title_fr', models.CharField(max_length=500, null=True, verbose_name='Title')),
                ('title_en', models.CharField(max_length=500, null=True, verbose_name='Title')),
                ('slug', models.CharField(blank=True, help_text='Leave blank to have the URL auto-generated from the title.', max_length=2000, verbose_name='URL')),
                ('_meta_title', models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Meta title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('gen_description', models.BooleanField(default=True, help_text='If checked, the description will be automatically generated from content. Uncheck if you want to manually set a custom description.', verbose_name='Generate description')),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Published')], default=2, help_text='With Draft chosen, will only be shown for admin users on the site.', verbose_name='Status')),
                ('publish_date', models.DateTimeField(blank=True, db_index=True, help_text="With Published chosen, won't be shown until this time", null=True, verbose_name='Published from')),
                ('expiry_date', models.DateTimeField(blank=True, help_text="With Published chosen, won't be shown after this time", null=True, verbose_name='Expires on')),
                ('short_url', models.URLField(blank=True, null=True)),
                ('in_sitemap', models.BooleanField(default=True, verbose_name='Show in sitemap')),
                ('content', mezzanine.core.fields.RichTextField(verbose_name='Content')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectPageBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', mezzanine.core.fields.RichTextField(verbose_name='Content')),
                ('content_fr', mezzanine.core.fields.RichTextField(null=True, verbose_name='Content')),
                ('content_en', mezzanine.core.fields.RichTextField(null=True, verbose_name='Content')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='description')),
                ('title', models.CharField(max_length=1024, verbose_name='title')),
                ('title_fr', models.CharField(max_length=1024, null=True, verbose_name='title')),
                ('title_en', models.CharField(max_length=1024, null=True, verbose_name='title')),
                ('with_separator', models.BooleanField(default=False)),
                ('background_color', models.CharField(blank=True, choices=[('black', 'black'), ('yellow', 'yellow'), ('red', 'red'), ('white', 'white'), ('blue', 'blue'), ('purple', 'purple')], max_length=32, verbose_name='background color')),
                ('login_required', models.BooleanField(default=False, verbose_name='login required')),
                ('project_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocks', to='organization-projects.ProjectPage', verbose_name='project page')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='ProjectPageImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('title', models.CharField(max_length=1024, verbose_name='title')),
                ('title_fr', models.CharField(max_length=1024, null=True, verbose_name='title')),
                ('title_en', models.CharField(max_length=1024, null=True, verbose_name='title')),
                ('file', mezzanine.core.fields.FileField(max_length=1024, verbose_name='Image')),
                ('credits', models.CharField(blank=True, max_length=256, null=True, verbose_name='credits')),
                ('credits_fr', models.CharField(blank=True, max_length=256, null=True, verbose_name='credits')),
                ('credits_en', models.CharField(blank=True, max_length=256, null=True, verbose_name='credits')),
                ('type', models.CharField(choices=[('logo', 'logo'), ('logo_white', 'logo white'), ('logo_black', 'logo black'), ('logo_header', 'logo header'), ('logo_footer', 'logo footer'), ('slider', 'slider'), ('card', 'card'), ('page_slider', 'page - slider'), ('page_featured', 'page - featured')], max_length=64, verbose_name='type')),
                ('project_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='organization-projects.ProjectPage', verbose_name='project page')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.AlterField(
            model_name='project',
            name='_meta_title',
            field=models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Meta title'),
        ),
        migrations.AlterField(
            model_name='project',
            name='type',
            field=models.CharField(blank=True, choices=[('internal', 'internal'), ('external', 'external')], max_length=128, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='projectblogpage',
            name='_meta_title',
            field=models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Meta title'),
        ),
        migrations.AlterField(
            model_name='projectcall',
            name='_meta_title',
            field=models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Meta title'),
        ),
        migrations.AlterField(
            model_name='projectcallblock',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocks', to='organization-projects.ProjectCall', verbose_name='project call'),
        ),
        migrations.AlterField(
            model_name='projectcallfile',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='organization-projects.ProjectCall', verbose_name='project call'),
        ),
        migrations.AlterField(
            model_name='projectcallimage',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='organization-projects.ProjectCall', verbose_name='project call'),
        ),
        migrations.AlterField(
            model_name='projectcalllink',
            name='call',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='links', to='organization-projects.ProjectCall', verbose_name='project call'),
        ),
        migrations.AlterField(
            model_name='projectdemo',
            name='_meta_title',
            field=models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Meta title'),
        ),
        migrations.AlterField(
            model_name='projectresidency',
            name='_meta_title',
            field=models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Meta title'),
        ),
        migrations.AddField(
            model_name='projectpage',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pages', to='organization-projects.Project', verbose_name='project'),
        ),
        migrations.AddField(
            model_name='projectpage',
            name='site',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='sites.Site'),
        ),
        migrations.AddField(
            model_name='dynamiccontentprojectpage',
            name='project_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_content_project_pages', to='organization-projects.ProjectPage', verbose_name='project page'),
        ),
        migrations.RunPython(copy_project_to_project_page),
    ]
