// -*- coding: utf-8 -*-

// Copyright (c) 2016-2017 Ircam
// Copyright (c) 2016-2017 Jérémy Fabre

// This file is part of mezzanine-organization.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Take a px value and output converted value.
//
// @param number $number
//   A px value to convert.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
//
// @return number
//   The number converted to the base unit.
@function output-from-px($number, $context: $base-font-size) {
  @if $base-unit == rem {
    @return typey-output-in-base-unit(($number / $base-font-size));
  }
  @if $base-unit == px {
    @return typey-output-in-base-unit(typey-strip-unit($number));
  }
  @if $base-unit == em {
    @return calculate-em-px($number, $context);
  }
}

// Take a key from the $font-size map and output converted value.
//
// @param string $size
//   A size from the $font-size map.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the parent
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
//
// @return number
//   The selected font-size in $base-unit.
@function output-from-font-size-map($size, $context: $base-font-size) {
  $map-size: map-get($font-size, $size);
  @if $base-unit == rem {
    @return typey-output-in-base-unit(($map-size / $base-font-size));
  }
  @if $base-unit == px {
    @return typey-output-in-base-unit(typey-strip-unit($map-size));
  }
  @if $base-unit == em {
    @return calculate-em-px($map-size, $context);
  }
}

// Take a line-height multipler and output converted value.
//
// @param number $number
//   Multiple of line height to be used.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
//
// @return number
//   The value of the line-height multiple converted to the base unit.
@function output-from-multiplier($x, $context: $base-font-size) {
  @if $base-unit == rem {
    @return typey-output-in-base-unit(($x * $base-line-height) / $base-font-size);
  }
  @if $base-unit == px {
    @return typey-output-in-base-unit(typey-strip-unit($x * $base-line-height));
  }
  @if $base-unit == em {
    @return calculate-em-multiplier($x, $context);
  }
}

// Take a line-height ratio and output as em.
//
// @param number $ratio
//   Multiple of the $font-size to be used.
// @param number|string $context
//  (optional) used to ensure function outputs the ratio regardless of whether
//  it is the same as the $base-line-height-ratio.
//
// @return number
//   The ratio in em.
@function output-from-ratio($ratio: $base-line-height-ratio) {
  @return $ratio;
}
